You are given an integer array prices where prices[i] is the price of a given stock on the ith day.

Design an algorithm to find the maximum profit. You may complete at most k transactions.

Notice that you may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).

 

Example 1:

Input: k = 2, prices = [2,4,1]
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.
Example 2:

Input: k = 2, prices = [3,2,6,5,0,3]
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.
 

Constraints:

0 <= k <= 100
0 <= prices.length <= 1000
0 <= prices[i] <= 1000

Solution:

To do so, I had first of all to grab nums size and store it in len; then we get rid of edge cases, when k == 0 or len < 2: in these occurrences, we just return 0.

k needs then to be "fixed": despite being told that it represents the number of "transactions" (ie: buy or sell operations), it is actually more like the number of profit-bearinng trades (ie: selling, after having bought for less); furthermore, it is pointless to consider a k which is wildly bigger than the number of days we are going to trade - and this in turn needs to be reduced to an even number to make sense (we would otherwise end up just buying for the last transaction, but it would be rather pointless).

Hence the expression: min(k * 2, len - len % 2).

We do all this because we are going to create an array dp of values to help us, initialising all the odd cells to 0 and all the even ones to INT_MAX.

Then it is time to loop through our list of prices for good, storing them as currPrice.

And for each one, we apply the generalised version of the logic I mentionend above:

the very first cell of dp is going to be set as the minimum between its current value and currPrice - min(dp[0], currPrice);
each following odd indexed cell is going to be the maximum between its current value and currPrice minus the prevous one - max(dp[i], currPrice - dp[i - 1]);
each following even indexed cell is going to be the minimum between its current value and currPrice minus the prevous one - min(dp[i], currPrice - dp[i - 1]);
After we are done, we can just return the value of the last cell :)

The code:

class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        int len = prices.size();
        // edge cases away
        if (!k || len < 2) return 0;
        // fixing k to be a meaningful, even number
        k = min(k * 2, len - len % 2);
        // declaring and setting up dp
        int dp[k];
        for (int i = 0; i < k; i++) dp[i] = i % 2 ? 0 : INT_MAX;
        for (int currPrice: prices) {
            // setting up the first dp element
            dp[0] = min(dp[0], currPrice);
            // updating dp with all the subsequent trades
            for (int i = 1; i < k; i++) {
                dp[i] = i % 2 ? max(dp[i], currPrice - dp[i - 1]) : min(dp[i], currPrice - dp[i - 1]);
            }
        }
        return dp[k - 1];
    }
};
And with a small change to handle edge cases, I moved down from an average 648ms time to a wooping 8ms, still with the same memory usage (not sure how one could get less, then); full explanation of the logic here - the improved code:

class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        int len = prices.size();
        // edge cases away
        if (!k || len < 2) return 0;
        // special case of unlimited transactions
        if (len < k * 2) {
            int sum = 0;
            for (int i = 1; i < len; i++) sum += max(0, prices[i] - prices[i - 1]);
            return sum;
        }
        // fixing k to be a meaningful, even number
        k = k * 2;
        // declaring and setting up dp
        int dp[k];
        for (int i = 0; i < k; i++) dp[i] = i % 2 ? 0 : INT_MAX;
        for (int currPrice: prices) {
            // setting up the first dp element
            dp[0] = min(dp[0], currPrice);
            // updating dp with all the subsequent trades
            for (int i = 1; i < k; i++) {
                dp[i] = i % 2 ? max(dp[i], currPrice - dp[i - 1]) : min(dp[i], currPrice - dp[i - 1]);
            }
        }
        return dp[k - 1];
    }
};
