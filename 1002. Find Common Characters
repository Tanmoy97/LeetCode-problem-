Given an array A of strings made only from lowercase letters, return a list of all characters that show up in all strings within the list (including duplicates).  For example, if a character occurs 3 times in all strings but not 4 times, you need to include that character three times in the final answer.

You may return the answer in any order.

 

Example 1:

Input: ["bella","label","roller"]
Output: ["e","l","l"]
Example 2:

Input: ["cool","lock","cook"]
Output: ["c","o"]
 

Note:

1. 1 <= A.length <= 100
2. 1 <= A[i].length <= 100
3. A[i][j] is a lowercase letter

SOLUTION:

class Solution {
public:
    vector<string> commonChars(vector<string>& A) {
        int count[26] = {0} ;
        
        string p = A[0] ;
        
        for(char c : p){
            count[c-'a']++ ;
        }
        
        
        
        for(string s : A){
            
            int dummy_count[26] = {0} ;
            
            for(char c : s){
                dummy_count[c-'a']++ ;
            }
            
            for(int i=0 ; i<26 ; i++){
                count[i] = min(count[i],dummy_count[i]) ;
            }
            
        }
        
        vector<string> res ;
        
        for( int i=0 ; i<26 ; i++ ){
            while(count[i]>0){
                auto k = char(i+'a') ;
                string p = "" ;
                p.push_back(k) ;
                res.push_back(p) ;
                count[i]-- ;
            }
        }
        
        return res ;
    }
};
