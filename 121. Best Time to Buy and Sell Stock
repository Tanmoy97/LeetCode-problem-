Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.

Note that you cannot sell a stock before you buy one.

Example 1:

Input: [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
             Not 7-1 = 6, as selling price needs to be larger than buying price.
Example 2:

Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.

Solution:

The maximum profit of selling the stock on day j is prices[j] - min(prices[0..j]). And the global maximum is obtained by exhausting all values of j. We use a variable to record min(prices[0..j]) and prices[j] is just the price during each loop.

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int price = INT_MAX, profit = 0;
        for (int p : prices) {
            price = min(price, p);
            profit = max(profit, p - price);
        }
        return profit;
    }
};
Or use the Kanade's algorithm .

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int cur = 0, ans = 0, n = prices.size();
        for (int i = 1; i < n; i++) {
            cur += prices[i] - prices[i - 1];
            cur = max(cur, 0);
            ans = max(ans, cur);
        }
        return ans;
    }
};
