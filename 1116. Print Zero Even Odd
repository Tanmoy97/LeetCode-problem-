Suppose you are given the following code:

class ZeroEvenOdd {
  public ZeroEvenOdd(int n) { ... }      // constructor
  public void zero(printNumber) { ... }  // only output 0's
  public void even(printNumber) { ... }  // only output even numbers
  public void odd(printNumber) { ... }   // only output odd numbers
}
The same instance of ZeroEvenOdd will be passed to three different threads:

Thread A will call zero() which should only output 0's.
Thread B will call even() which should only ouput even numbers.
Thread C will call odd() which should only output odd numbers.
Each of the threads is given a printNumber method to output an integer. Modify the given program to output the series 010203040506... where the length of the series must be 2n.

 

Example 1:

Input: n = 2
Output: "0102"
Explanation: There are three threads being fired asynchronously. One of them calls zero(), the other calls even(), and the last one calls odd(). "0102" is the correct output.
Example 2:

Input: n = 5
Output: "0102030405"

SOLUTION:

class ZeroEvenOdd {
private:
    int n;
    promise<function<void(int)> > m_p1;
    promise<function<void(int)> > m_p2;

public:
    ZeroEvenOdd(int n) {
        this->n = n;
    }

    // printNumber(x) outputs "x", where x is an integer.
    void zero(function<void(int)> printNumber) {
        auto my_eve = m_p1.get_future().get();
        auto my_odd = m_p2.get_future().get();
        for (int i = 1; i<=n; ++i){
            printNumber(0);
            if (i%2){
                my_odd(i);
            }else{
                my_eve(i);
            }
        }
    }

    void even(function<void(int)> printNumber) {
        m_p1.set_value(printNumber);
        
    }

    void odd(function<void(int)> printNumber) {
        m_p2.set_value(printNumber);
        
    }
};
