Given two lists of closed intervals, each list of intervals is pairwise disjoint and in sorted order.

Return the intersection of these two interval lists.

(Formally, a closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b.  The intersection of two closed intervals is a set of real numbers that is either empty, or can be represented as a closed interval.  For example, the intersection of [1, 3] and [2, 4] is [2, 3].)

 

Example 1:



Input: A = [[0,2],[5,10],[13,23],[24,25]], B = [[1,5],[8,12],[15,24],[25,26]]
Output: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]
 

Note:

0 <= A.length < 1000
0 <= B.length < 1000
0 <= A[i].start, A[i].end, B[i].start, B[i].end < 10^9

SOLUTION:

class Solution {
public:
    vector<vector<int>> intervalIntersection(vector<vector<int>>& A, vector<vector<int>>& B) {
        vector<vector<int>> result;
        for(int i=0, j=0; i<A.size() && j<B.size();){
            // Relabel these so it's easier to read
            int a_start = A[i][0], a_end = A[i][1], b_start = B[j][0], b_end = B[j][1];
            
            // If there's an intersection, add to results
            if(b_start <= a_end && a_start <= b_end) {
                int intersection_start = max(a_start, b_start);
                int intersection_end = min(a_end, b_end);
                result.push_back({intersection_start, intersection_end});
            }
            // increment based on which interval's end is smaller
            if(a_end < b_end) i++;
            else j++;
        }
        return result;
    }
};
