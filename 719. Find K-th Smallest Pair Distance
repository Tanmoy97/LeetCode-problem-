Given an integer array, return the k-th smallest distance among all the pairs. The distance of a pair (A, B) is defined as the absolute difference between A and B.

Example 1:
Input:
nums = [1,3,1]
k = 1
Output: 0 
Explanation:
Here are all the pairs:
(1,3) -> 2
(1,1) -> 0
(3,1) -> 2
Then the 1st smallest distance pair is (1,1), and its distance is 0.
Note:
1. 2 <= len(nums) <= 10000.
2. 0 <= nums[i] < 1000000.
3. 1 <= k <= len(nums) * (len(nums) - 1) / 2.

SOLUTION:

class Solution {
public:
    int smallestDistancePair(vector<int>& nums, int k) {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        int l = nums[1] - nums[0];
        for(int i = 2; i < n; i++){
            if(nums[i] - nums[i-1] < l){
                l = nums[i] - nums[i-1];
            } 
        }
        int r = nums[n-1] - nums[0];
        while(l<r){
            int mid = l + (r - l)/2;
            int count = 0;
            for(int i = 0; i < n; i++){
                int pos = upper_bound(nums.begin(), nums.end(), nums[i] + mid) - nums.begin();
                count += pos - i - 1;
            }
            if(count < k){
                l = mid+1;
            }
            else
                r = mid;
        }
        return l;
    }
};
