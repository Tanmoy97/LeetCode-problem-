Write a program that outputs the string representation of numbers from 1 to n, however:

If the number is divisible by 3, output "fizz".
If the number is divisible by 5, output "buzz".
If the number is divisible by both 3 and 5, output "fizzbuzz".
For example, for n = 15, we output: 1, 2, fizz, 4, buzz, fizz, 7, 8, fizz, buzz, 11, fizz, 13, 14, fizzbuzz.

Suppose you are given the following code:

class FizzBuzz {
  public FizzBuzz(int n) { ... }               // constructor
  public void fizz(printFizz) { ... }          // only output "fizz"
  public void buzz(printBuzz) { ... }          // only output "buzz"
  public void fizzbuzz(printFizzBuzz) { ... }  // only output "fizzbuzz"
  public void number(printNumber) { ... }      // only output the numbers
}
Implement a multithreaded version of FizzBuzz with four threads. The same instance of FizzBuzz will be passed to four different threads:

Thread A will call fizz() to check for divisibility of 3 and outputs fizz.
Thread B will call buzz() to check for divisibility of 5 and outputs buzz.
Thread C will call fizzbuzz() to check for divisibility of 3 and 5 and outputs fizzbuzz.
Thread D will call number() which should only output the numbers.

SOLUTION:

class FizzBuzz {
private:
    int n;
    int current_number;
    mutex number_mutex;
    const int number_of_threads = 4;
    bool done = true;
    
public:
    FizzBuzz(int n) {
        this->n = n;
        if (n > 0){
            done = false;
        }
        current_number = 1;
    }

private: 
    void nextNumber(){
        if (current_number < n){
            scoped_lock lock(number_mutex);
            current_number++;
        } else{
            done = true;
        }
    }

public: 
    // printFizz() outputs "fizz".
    void fizz(function<void()> printFizz) {        
        while (!done){
            if (!(current_number % 3 ) && (current_number % 5)){
                printFizz();
                nextNumber();               
            }
        }
    }

    // printBuzz() outputs "buzz".
    void buzz(function<void()> printBuzz) {        
        while (!done){
            if ((current_number % 3 ) && !(current_number % 5)){
                printBuzz();
                nextNumber();               
            }
        }
    }
    
    // printFizzBuzz() outputs "fizzbuzz".
	void fizzbuzz(function<void()> printFizzBuzz) {
        while (!done){
            if (!(current_number % 3 ) && !(current_number % 5)){
                printFizzBuzz();
                nextNumber();               
            }
        }
    }

    // printNumber(x) outputs "x", where x is an integer.
    void number(function<void(int)> printNumber) {
        
        while (!done){
            if ((current_number % 3 ) && (current_number % 5)){
                printNumber(current_number);
                nextNumber();               
            }
        }
    }
};
