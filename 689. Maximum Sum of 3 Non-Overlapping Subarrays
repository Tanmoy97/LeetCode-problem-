In a given array nums of positive integers, find three non-overlapping subarrays with maximum sum.

Each subarray will be of size k, and we want to maximize the sum of all 3*k entries.

Return the result as a list of indices representing the starting position of each interval (0-indexed). If there are multiple answers, return the lexicographically smallest one.

Example:

Input: [1,2,1,2,6,7,5,1], 2
Output: [0, 3, 5]
Explanation: Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].
We could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger.
 

Note:

nums.length will be between 1 and 20000.
nums[i] will be between 1 and 65535.
k will be between 1 and floor(nums.length / 3).

Solution:

class Solution {
public:
    vector<int> maxSumOfThreeSubarrays(vector<int>& nums, int k) {
        int n = nums.size() - k + 1;
        vector<int> dp(n,0);
        vector<int> left(n,0);
        vector<int> right(n,0);
        int sum = 0;
        int i;
        for(i = 0; i < nums.size(); i++){
            sum += nums[i];
            //forming a dp which stores the value of sum of subarray of size k 
            if(i >= k - 1){
                dp[i - k + 1] = sum;
                sum -= nums[i-k+1];
            }
        }
        int max_ = 0;
        //storing the start index of maximum sum sub array possible from the left hand side for each index i
        for(i = 0; i < n; i++){
            if(dp[i] > dp[max_]){
                max_ = i;
            }
            left[i] = max_;
        }
        max_ = n-1;
        //storing the start index of maximum sum sub array possible from the right hand side for each index i
        for(i = n-1; i >=0; i--){
            if(dp[i] >= dp[max_]){
                max_ = i;
            }
            right[i] = max_;
        }
        vector<int> output(3,-1);
        // finding the maximum sum from starting k to n-k position 
        for(i = k; i < n - k; i++){
            if(output[0] == -1 ||dp[output[0]]+dp[output[1]]+dp[output[2]] < 
                dp[i] + dp[left[i - k]] + dp[right[i+k]]){
                output[0] = left[i-k];
                output[1] = i;
                output[2] = right[i+k];
            }
        }
        return output;
    }
};
